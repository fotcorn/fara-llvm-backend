//===---- FARAISelDAGToDAG.h - A dag to dag inst selector for FARA -------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the FARA target.
//
//===----------------------------------------------------------------------===//

#include "FARA.h"
#include "FARATargetMachine.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"

using namespace llvm;

/// FARADAGToDAGISel - FARA specific code to select FARA machine
/// instructions for SelectionDAG operations.
namespace {

class FARADAGToDAGISel : public SelectionDAGISel {
public:
  static char ID;

  FARADAGToDAGISel(FARATargetMachine &TM) : SelectionDAGISel(ID, TM) {}

  void Select(SDNode *N) override;
  bool SelectADDRri(SDValue Addr, SDValue &Base, SDValue &Offset);
  bool SelectADDRrr(SDValue Addr, SDValue &Base, SDValue &Offset);

  StringRef getPassName() const override {
    return "FARA DAG->DAG Pattern Instruction Selection";
  }

// Include the pieces autogenerated from the target description.
#include "FARAGenDAGISel.inc"
};

char FARADAGToDAGISel::ID;

} // end anonymous namespace

/// This pass converts a legalized DAG into a FARA-specific DAG, ready for
/// instruction scheduling.
FunctionPass *llvm::createFARAISelDag(FARATargetMachine &TM) {
  return new FARADAGToDAGISel(TM);
}

void FARADAGToDAGISel::Select(SDNode *N) {
  SDLoc dl(N);
  if (N->isMachineOpcode()) {
    N->setNodeId(-1);
    return; // Already selected.
  }

  SelectCode(N);
}

bool FARADAGToDAGISel::SelectADDRri(SDValue Addr, SDValue &Base,
                                    SDValue &Offset) {
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    Base = CurDAG->getTargetFrameIndex(
        FIN->getIndex(), TLI->getPointerTy(CurDAG->getDataLayout()));
    Offset = CurDAG->getTargetConstant(0, SDLoc(Addr), MVT::i64);
    return true;
  }
  return false;
}

bool FARADAGToDAGISel::SelectADDRrr(SDValue Addr, SDValue &Base,
                                    SDValue &Offset) {
  return false;
}
