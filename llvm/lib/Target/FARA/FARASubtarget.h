//===-- FARASubtarget.h - Define Subtarget for the FARA -------*- C++
//-*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the FARA specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_FARA_FARASUBTARGET_H
#define LLVM_LIB_TARGET_FARA_FARASUBTARGET_H

// #include "FARAFrameLowering.h"
#include "FARAISelLowering.h"
#include "FARAInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "FARAGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class FARASubtarget : public FARAGenSubtargetInfo {
  virtual void anchor();
  FARAInstrInfo InstrInfo;
  //   FARAFrameLowering FrameLowering;
  FARATargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  FARASubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
                const TargetMachine &TM);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const FARAInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  /*
  const FARAFrameLowering *getFrameLowering() const override {
    return nullptr;
    // return &FrameLowering;
  }
  */
  const FARATargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  /*const TargetRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }*/
};
} // namespace llvm

#endif
